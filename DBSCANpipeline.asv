%% get the data you need 
% one animal at a time

%set the paramaters 
STAstackQ = input('Input 1 to import red and green channel stacks to create STA videos. Input 0 otherwise. ');
ETAstackQ = input('Input 1 to import red and green channel stacks to create ETA videos. Input 0 otherwise. '); 
if STAstackQ == 1 || ETAstackQ == 1 
    BGsubQ = input('Input 1 if you want to do background subtraction on your imported image stacks. Input 0 otherwise. ');
    if BGsubQ == 1
        BGsubTypeQ = input('Input 0 to do a simple background subtraction. Input 1 if you want to do row by row background subtraction. ');
    end 
end 
if STAstackQ == 1 || ETAstackQ == 1
    optoQ = input('Input 1 if this is an opto exeriment. Input 0 for a behavior experiment. ');
    if optoQ == 1 
        stimStateQ = input('Input 0 if you used flyback stimulation. Input 1 if not. ');
        if stimStateQ == 0 
            state = 8;
        elseif stimStateQ == 1
            state = 7;
        end 
    elseif optoQ == 0 
        state = input('Input the teensy state you care about. ');
    end 
    % batchQ = input('Input 1 if you want to batch process across mice. Input 0 otherwise. ');
    % if batchQ == 0 
    %     mouseNum = 1; 
    % elseif batchQ == 1 
    %     mouseNum = input('How many mice are you batch processing? ');
    % end 
    MouseNum = 1; mouse = 1;
    FPSstack = cell(1,mouseNum);
    vidList = cell(1,mouseNum);
    framePeriod = input(sprintf('What is the frame period for mouse #%d? ',mouse));
    FPS = 1/framePeriod; 
    FPSq = input(sprintf('Input 1 if the FPS needs to be adjusted based on frame averaging for mouse #%d. ',mouse));
    FPSstack{mouse} = FPS;
    if FPSq == 1 
        FPSadjust = input(sprintf('By what factor does the FPS need to be adjusted for mouse #%d? ',mouse));
        FPSstack{mouse} = FPS/FPSadjust;
    elseif FPSq == 0 
        FPSadjust = 1;
    end 
    vidList{mouse} = input(sprintf('What videos are you analyzing for mouse #%d? ',mouse));    
end
if STAstackQ == 1 
    CAQ = 1;
    if CAQ == 1
        tTypeQ = 0; %input('Do you want to seperate calcium peaks by trial type (light condition)? No = 0. Yes = 1. ');
    end 
    mouseNum = 1; 
    if CAQ == 1 
        cDataFullTrace = cell(1,mouseNum);
        terminals = cell(1,mouseNum);
    end  
    dataDir = cell(1,mouseNum);
    % get your data        
    dirLabel = sprintf('WHERE IS THE DATA FOR MOUSE #%d? ',mouse);
    dataDir{mouse} = uigetdir('*.*',dirLabel);
    cd(dataDir{mouse}); % go to the right directory 
    if CAQ == 1 
        % get calcium data 
        terminals{mouse} = input(sprintf('What terminals do you care about for mouse #%d? Input in correct order. ',mouse));    
        CAfileList = dir('**/*CAdata_*.mat'); % list data files in current directory 
        for vid = 1:length(vidList{mouse})
            CAlabel = CAfileList(vid).name;
            CAmat = matfile(sprintf(CAlabel,vidList{mouse}(vid)));
            CAdata = CAmat.CcellData;       
            cDataFullTrace{mouse}{vid} = CAdata;
        end 
    end         
end 
if STAstackQ == 1 || ETAstackQ == 1 
    % get registered images 
    regImDir = uigetdir('*.*','WHERE ARE THE REGISTERED IMAGES?');
    cd(regImDir);
    redlabel = input('Give a string example of what the red stacks are labeled as. Put %d in place of where the vid number is. '); % example: SF56_20190718_ROI2_vid1_BBB = SF56_20190718_ROI2_vid%d_BBB
    greenlabel = input('Give a string example of what the green stacks are labeled as. Put %d in place of where the vid number is. '); % example: SF56_20190718_ROI2_vid1_BBB = SF56_20190718_ROI2_vid%d_BBB
    greenStacks1 = cell(1,length(vidList{mouse}));
    redStacks1 = cell(1,length(vidList{mouse}));
    greenStacksBS = cell(1,length(vidList{mouse}));
    redStacksBS = cell(1,length(vidList{mouse}));
    redStackArray = cell(1,length(vidList{mouse}));
    greenStackArray = cell(1,length(vidList{mouse}));
    greenStacks = cell(1,length(vidList{mouse}));
    redStacks = cell(1,length(vidList{mouse}));
    for vid = 1:length(vidList{mouse})
        cd(regImDir);
        redMat = matfile(sprintf(redlabel,vidList{mouse}(vid)));       
        redRegStacks = redMat.regStacks;
        if size(redRegStacks,2) > 2 
            if iscell(redRegStacks{2,4}) == 0
                redStacks1{vid} = redRegStacks{2,4};
            elseif iscell(redRegStacks{2,4}) == 1
                redStacks1{vid} = redRegStacks{2,4}{1};
            end 
        elseif size(redRegStacks,2) == 2 
            if iscell(redRegStacks{2,2}) == 0 
                redStacks1{vid} = redRegStacks{2,2};
            elseif iscell(redRegStacks{2,2}) == 1 
                redStacks1{vid} = redRegStacks{2,2}{1};
            end 
        end 
        greenMat = matfile(sprintf(greenlabel,vidList{mouse}(vid)));       
        greenRegStacks = greenMat.regStacks;        
        if size(greenRegStacks,2) > 2 
            if iscell(greenRegStacks{2,3}) == 0
                greenStacks1{vid} = greenRegStacks{2,3};
            elseif iscell(greenRegStacks{2,3}) == 1
                greenStacks1{vid} = greenRegStacks{2,3}{1};
            end
        elseif size(greenRegStacks,2) == 2 
            if iscell(greenRegStacks{2,1}) == 0
                greenStacks1{vid} = greenRegStacks{2,1};
            elseif iscell(greenRegStacks{2,1}) == 1
                greenStacks1{vid} = greenRegStacks{2,1}{1};
            end     
        elseif size(greenRegStacks,2) == 1 
            greenStacks1{vid} = greenRegStacks{2,1}{1};
        end                            
        if BGsubQ == 0 
            redStacksBS = redStacks1;
            greenStacksBS = greenStacks1; 
        elseif BGsubQ == 1
            if BGsubTypeQ == 0 
                if vid == 1 
                    [redStacks_BS,BG_ROIboundData] = backgroundSubtraction(redStacks1{vid});
                    redStacksBS{vid} = redStacks_BS;
                    [greenStacks_BS] = backgroundSubtraction2(greenStacks1{vid},BG_ROIboundData);
                    greenStacksBS{vid} = greenStacks_BS;
                else
                    [redStacks_BS] = backgroundSubtraction2(redStacks1{vid},BG_ROIboundData);
                    redStacksBS{vid} = redStacks_BS;
                    [greenStacks_BS] = backgroundSubtraction2(greenStacks1{vid},BG_ROIboundData);
                    greenStacksBS{vid} = greenStacks_BS;
                end 
            elseif BGsubTypeQ == 1
                if vid == 1 
                    [redStacks_BS,BG_ROIboundData] = backgroundSubtractionPerRow(redStacks1{vid});
                    redStacksBS{vid} = redStacks_BS;
                    [greenStacks_BS] = backgroundSubtractionPerRow2(greenStacks1{vid},BG_ROIboundData);
                    greenStacksBS{vid} = greenStacks_BS;
                else
                    [redStacks_BS] = backgroundSubtractionPerRow2(redStacks1{vid},BG_ROIboundData);
                    redStacksBS{vid} = redStacks_BS;
                    [greenStacks_BS] = backgroundSubtractionPerRow2(greenStacks1{vid},BG_ROIboundData);
                    greenStacksBS{vid} = greenStacks_BS;
                end 
            end 
        end               
        % average registered imaging data across planes in Z 
        if iscell(redStacks1{1}) == 0 
            for Z = 1%:size(redStacks1{1},2)
                redStackArray{vid}(:,:,:,Z) = redStacksBS{vid}{Z};
                greenStackArray{vid}(:,:,:,Z) = greenStacksBS{vid}{Z};
            end 
        elseif iscell(redStacks1{1}) == 1 
            for Z = 1:size(redStacks1{1},2)
                redStackArray{vid}(:,:,:,Z) = redStacksBS{vid}{Z};
                greenStackArray{vid}(:,:,:,Z) = greenStacksBS{vid}{Z};
            end 
        end 
        redStacks{vid} = mean(redStackArray{vid},4);
        greenStacks{vid} = mean(greenStackArray{vid},4);
    end 
end 
clearvars redMat redRegStacks redStacks1 greenMat greenRegStacks greenStacks1 redStacksBS redStacks_BS greenStacksBS greenStacks_BS BG_ROIboundData redStackArray greenStackArray
% get HDF data for making ETA stack averages whether or not opto is done 
if ETAstackQ == 1 && optoQ == 1 
    state_end_f2 = cell(1,length(vidList{mouse}));        
    trialLengths2 = cell(1,length(vidList{mouse}));   
    for vid = 1:length(vidList{mouse})
        [~,statestartf,stateendf,~,~,trialTypes] = makeHDFchart_redBlueStim(state,framePeriod,vidList{mouse}(vid),mouse);
        state_start_f{mouse}{vid} = floor(statestartf/FPSadjust);
        state_end_f2{vid} = floor(stateendf/FPSadjust);
        TrialTypes{mouse}{vid} = trialTypes(1:length(statestartf),:);
        trialLengths2{vid} = state_end_f2{vid}-state_start_f{mouse}{vid};
    end 
    % this fixes discrete time rounding errors to ensure the stimuli are
    % all the correct number of frames long 
    if mouse == 1 
        stimTimeLengths = input('How many seconds are the stims on for? ');
    end 
    stimFrameLengths = floor(stimTimeLengths*FPSstack{mouse});              
    for frameLength = 1:length(stimFrameLengths)
        for vid = 1:length(vidList{mouse})
            for trial = 1:length(state_start_f{mouse}{vid})
                [~,c] = min(abs(trialLengths2{vid}(trial)-stimFrameLengths));
                trialLengths{mouse}{vid}(trial) = stimFrameLengths(c);
                state_end_f{mouse}{vid}(trial) = state_start_f{mouse}{vid}(trial) + stimFrameLengths(c);
            end 
        end 
    end      
elseif ETAstackQ == 1 && optoQ == 0
    state_end_f2 = cell(1,length(vidList{mouse}));
    trialLengths2 = cell(1,length(vidList{mouse}));
    for vid = 1:length(vidList{mouse})
        [statestartf,stateendf] = behavior_FindStateBounds(state,framePeriod,vid,mouse);
        state_start_f{mouse}{vid} = floor(statestartf/FPSadjust);
        if isempty(stateendf) == 0
            state_end_f2{vid} = floor(stateendf/FPSadjust);
            trialLengths2{vid} = state_end_f2{vid}-state_start_f{mouse}{vid};
        end 
    end    
    % this fixes discrete time rounding errors to ensure the stimuli are
    % all the correct number of frames long 
    if mouse == 1 
        stimTimeLengths = input('How many seconds are the stims on for? ');
    end 
    stimFrameLengths = floor(stimTimeLengths*FPSstack{mouse});
    for frameLength = 1:length(stimFrameLengths)
        for vid = 1:length(vidList{mouse})
            for trial = 1:length(state_start_f{mouse}{vid})
                % determine the correct length of frames per trial
                % (accounts for rounding/discrete time issues 
                [~,c] = min(abs(trialLengths2{vid}(trial)-stimFrameLengths));
                trialLengths{mouse}{vid}(trial) = stimFrameLengths(c);
                state_end_f{mouse}{vid}(trial) = state_start_f{mouse}{vid}(trial) + stimFrameLengths(c);
            end 
        end 
    end 
end 

% get red or blue opto stim trials only 
if STAstackQ == 1 || ETAstackQ == 1
    if optoQ == 1 
        redTrialsOnlyQ = input('Input 0 if you want the start times for only red opto trials. Input 1 for blue only. ');
        if redTrialsOnlyQ == 0
            for mouse = 1:mouseNum
                for vid = 1:length(vidList{mouse}) 
                    % find the trials that do not have red opto stims 
                    [r,~] = find(TrialTypes{mouse}{vid}(:,2) ~= 2);
                    % remove trials start and end frames that do not have
                    % red opto stims 
                    state_start_f{mouse}{vid}(r) = NaN;
                    state_end_f{mouse}{vid}(r) = NaN;
                    % remove NaNs 
                    state_start_f{mouse}{vid} = state_start_f{mouse}{vid}(~isnan(state_start_f{mouse}{vid}));
                    state_end_f{mouse}{vid} = state_end_f{mouse}{vid}(~isnan(state_end_f{mouse}{vid}));
                    % remove 0s B = A(A~=)
                    state_start_f{mouse}{vid} = state_start_f{mouse}{vid}(state_start_f{mouse}{vid}~=0);
                    state_end_f{mouse}{vid} = state_end_f{mouse}{vid}(state_end_f{mouse}{vid}~=0);
                end 
            end
        elseif redTrialsOnlyQ == 1
            for mouse = 1:mouseNum
                for vid = 1:length(vidList{mouse}) 
                    % find the trials that do not have blue opto stims 
                    [r,~] = find(TrialTypes{mouse}{vid}(:,2) ~= 1);
                    % remove trials start and end frames that do not have
                    % red opto stims 
                    state_start_f{mouse}{vid}(r) = NaN;
                    state_end_f{mouse}{vid}(r) = NaN;
                    % remove NaNs 
                    state_start_f{mouse}{vid} = state_start_f{mouse}{vid}(~isnan(state_start_f{mouse}{vid}));
                    state_end_f{mouse}{vid} = state_end_f{mouse}{vid}(~isnan(state_end_f{mouse}{vid}));
                    % remove 0s B = A(A~=)
                    state_start_f{mouse}{vid} = state_start_f{mouse}{vid}(state_start_f{mouse}{vid}~=0);
                    state_end_f{mouse}{vid} = state_end_f{mouse}{vid}(state_end_f{mouse}{vid}~=0);
                end 
            end
        end 
    end 
end 
%}
%% 